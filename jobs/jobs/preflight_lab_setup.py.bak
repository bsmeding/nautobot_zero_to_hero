"""
Pre-flight Lab Setup Job

This job populates Nautobot with the lab topology data from the Containerlab setup.
Based on the lab topology from: https://netdevops.it/blog/building-a-reusable-network-automation-lab-with-containerlab/

This demonstrates how to programmatically create Nautobot objects using Jobs.
"""

from nautobot.apps.jobs import Job, StringVar, BooleanVar, register_jobs
from nautobot.dcim.models import Device, DeviceRole, Platform, Interface
from nautobot.ipam.models import IPAddress, Prefix, VLAN
from nautobot.extras.models import Tag
from nautobot.core.models import Site
import ipaddress


class PreflightLabSetup(Job):
    """
    Pre-flight Lab Setup Job
    
    Populates Nautobot with the lab topology data from the Containerlab setup.
    Creates sites, devices, interfaces, and IP addresses for the demo lab.
    """
    
    class Meta:
        name = "Pre-flight Lab Setup"
        description = "Populate Nautobot with Containerlab lab topology data"
        read_only = False
        has_sensitive_variables = False
        
    # Job variables
    site_name = StringVar(
        label="Site Name",
        description="Site name for the lab",
        default="Main Lab",
        required=True
    )
    
    management_subnet = StringVar(
        label="Management Subnet",
        description="Management network subnet (CIDR notation)",
        default="172.20.20.0/24",
        required=True
    )
    
    create_vlans = BooleanVar(
        label="Create VLANs",
        description="Create VLANs for the lab",
        default=True
    )
    
    create_tags = BooleanVar(
        label="Create Tags",
        description="Create tags for organization",
        default=True
    )

    def run(self, site_name, management_subnet, create_vlans, create_tags):
        """
        Execute the job
        """
        self.logger.info("Starting pre-flight lab setup...")
        
        try:
            # Create or get site
            site, created = Site.objects.get_or_create(
                name=site_name,
                defaults={
                    'slug': site_name.lower().replace(' ', '-'),
                    'status': 'active'
                }
            )
            if created:
                self.logger.info(f"Created site: {site_name}")
            else:
                self.logger.info(f"Using existing site: {site_name}")
            
            # Create tags if requested
            if create_tags:
                self._create_tags()
            
            # Create management network
            mgmt_prefix = self._create_management_network(site, management_subnet)
            
            # Create VLANs if requested
            if create_vlans:
                self._create_vlans(site)
            
            # Create devices
            self._create_devices(site, mgmt_prefix)
            
            # Create interfaces and IP addresses
            self._create_interfaces_and_ips(site, mgmt_prefix)
            
            self.logger.info("Pre-flight lab setup completed successfully!")
            
        except Exception as e:
            self.logger.error(f"Error during lab setup: {str(e)}")
            raise
    
    def _create_tags(self):
        """Create organizational tags"""
        tag_data = [
            {'name': 'lab', 'color': 'blue'},
            {'name': 'access', 'color': 'green'},
            {'name': 'distribution', 'color': 'orange'},
            {'name': 'core', 'color': 'red'},
            {'name': 'management', 'color': 'purple'},
            {'name': 'data', 'color': 'cyan'},
        ]
        
        for tag_info in tag_data:
            tag, created = Tag.objects.get_or_create(
                name=tag_info['name'],
                defaults={'color': tag_info['color']}
            )
            if created:
                self.logger.info(f"Created tag: {tag.name}")
    
    def _create_management_network(self, site, subnet):
        """Create management network prefix"""
        try:
            network = ipaddress.IPv4Network(subnet, strict=False)
            prefix, created = Prefix.objects.get_or_create(
                prefix=str(network),
                site=site,
                defaults={
                    'status': 'active',
                    'description': 'Management network for lab devices'
                }
            )
            if created:
                self.logger.info(f"Created management prefix: {subnet}")
            return prefix
        except Exception as e:
            self.logger.warning(f"Could not create management prefix: {str(e)}")
            return None
    
    def _create_vlans(self, site):
        """Create VLANs for the lab"""
        vlan_data = [
            {'vid': 10, 'name': 'Data', 'description': 'Data VLAN'},
            {'vid': 20, 'name': 'Voice', 'description': 'Voice VLAN'},
            {'vid': 30, 'name': 'Management', 'description': 'Management VLAN'},
            {'vid': 100, 'name': 'Native', 'description': 'Native VLAN'},
        ]
        
        for vlan_info in vlan_data:
            vlan, created = VLAN.objects.get_or_create(
                vid=vlan_info['vid'],
                site=site,
                defaults={
                    'name': vlan_info['name'],
                    'description': vlan_info['description'],
                    'status': 'active'
                }
            )
            if created:
                self.logger.info(f"Created VLAN {vlan.vid}: {vlan.name}")
    
    def _create_devices(self, site, mgmt_prefix):
        """Create devices for the lab topology"""
        
        # Get or create device roles
        roles = {}
        role_data = [
            ('access', 'Access Switch', 'green'),
            ('distribution', 'Distribution Switch', 'orange'),
            ('core', 'Core Router', 'red'),
        ]
        
        for role_slug, role_name, color in role_data:
            role, created = DeviceRole.objects.get_or_create(
                slug=role_slug,
                defaults={
                    'name': role_name,
                    'color': color
                }
            )
            roles[role_slug] = role
            if created:
                self.logger.info(f"Created device role: {role_name}")
        
        # Get or create platforms
        platforms = {}
        platform_data = [
            ('arista_eos', 'Arista EOS', 'arista'),
            ('nokia_srl', 'Nokia SR Linux', 'nokia'),
        ]
        
        for platform_slug, platform_name, manufacturer in platform_data:
            platform, created = Platform.objects.get_or_create(
                slug=platform_slug,
                defaults={
                    'name': platform_name,
                    'manufacturer': manufacturer
                }
            )
            platforms[platform_slug] = platform
            if created:
                self.logger.info(f"Created platform: {platform_name}")
        
        # Device definitions based on lab topology
        device_data = [
            {
                'name': 'access1',
                'role': 'access',
                'platform': 'arista_eos',
                'mgmt_ip': '172.20.20.11',
                'description': 'Access Switch 1 - Arista cEOS'
            },
            {
                'name': 'access2',
                'role': 'access',
                'platform': 'arista_eos',
                'mgmt_ip': '172.20.20.12',
                'description': 'Access Switch 2 - Arista cEOS'
            },
            {
                'name': 'dist1',
                'role': 'distribution',
                'platform': 'nokia_srl',
                'mgmt_ip': '172.20.20.13',
                'description': 'Distribution Switch - Nokia SR Linux'
            },
            {
                'name': 'rtr1',
                'role': 'core',
                'platform': 'nokia_srl',
                'mgmt_ip': '172.20.20.14',
                'description': 'Core Router - Nokia SR Linux'
            },
        ]
        
        created_devices = []
        for device_info in device_data:
            device, created = Device.objects.get_or_create(
                name=device_info['name'],
                site=site,
                defaults={
                    'device_role': roles[device_info['role']],
                    'platform': platforms[device_info['platform']],
                    'status': 'active',
                    'description': device_info['description']
                }
            )
            
            if created:
                self.logger.info(f"Created device: {device.name}")
                created_devices.append((device, device_info['mgmt_ip']))
            else:
                self.logger.info(f"Using existing device: {device.name}")
        
        return created_devices
    
    def _create_interfaces_and_ips(self, site, mgmt_prefix):
        """Create interfaces and IP addresses for devices"""
        
        # Interface and IP data for each device
        interface_data = {
            'access1': [
                {'name': 'Management1', 'type': 'virtual', 'mgmt_ip': '172.20.20.11/24'},
                {'name': 'Ethernet1', 'type': '1000base-t', 'description': 'Link to dist1'},
                {'name': 'Ethernet2', 'type': '1000base-t', 'description': 'Access port'},
                {'name': 'Ethernet3', 'type': '1000base-t', 'description': 'Access port'},
            ],
            'access2': [
                {'name': 'Management1', 'type': 'virtual', 'mgmt_ip': '172.20.20.12/24'},
                {'name': 'Ethernet1', 'type': '1000base-t', 'description': 'Link to dist1'},
                {'name': 'Ethernet2', 'type': '1000base-t', 'description': 'Access port'},
                {'name': 'Ethernet3', 'type': '1000base-t', 'description': 'Access port'},
            ],
            'dist1': [
                {'name': 'ethernet-1/1', 'type': '1000base-t', 'description': 'Link to access1'},
                {'name': 'ethernet-1/2', 'type': '1000base-t', 'description': 'Link to access2'},
                {'name': 'ethernet-1/3', 'type': '1000base-t', 'description': 'Link to rtr1'},
                {'name': 'ethernet-1/4', 'type': 'virtual', 'mgmt_ip': '172.20.20.13/24'},
            ],
            'rtr1': [
                {'name': 'ethernet-1/1', 'type': '1000base-t', 'description': 'Link to dist1'},
                {'name': 'ethernet-1/2', 'type': 'virtual', 'mgmt_ip': '172.20.20.14/24'},
            ],
        }
        
        for device_name, interfaces in interface_data.items():
            try:
                device = Device.objects.get(name=device_name, site=site)
                
                for iface_info in interfaces:
                    # Create interface
                    interface, created = Interface.objects.get_or_create(
                        device=device,
                        name=iface_info['name'],
                        defaults={
                            'type': iface_info['type'],
                            'description': iface_info.get('description', ''),
                            'enabled': True
                        }
                    )
                    
                    if created:
                        self.logger.info(f"Created interface {interface.name} on {device.name}")
                    
                    # Create IP address if specified
                    if 'mgmt_ip' in iface_info:
                        ip_addr, created = IPAddress.objects.get_or_create(
                            address=iface_info['mgmt_ip'],
                            defaults={
                                'status': 'active',
                                'description': f'Management IP for {device.name}'
                            }
                        )
                        
                        if created:
                            self.logger.info(f"Created IP address: {ip_addr.address}")
                        
                        # Assign IP to interface
                        interface.ip_addresses.add(ip_addr)
                        
            except Device.DoesNotExist:
                self.logger.warning(f"Device {device_name} not found, skipping interfaces")
            except Exception as e:
                self.logger.warning(f"Error creating interfaces for {device_name}: {str(e)}")


# Register the job
register_jobs(PreflightLabSetup)
