services:
  nautobot-init:
    image: alpine:latest
    container_name: ${NAUTOBOT_CONTAINER_NAME:-nzth-nautobot}-init
    volumes:
      - ./media:/opt/nautobot/media
    command: ["sh", "-c", "mkdir -p /opt/nautobot/media/devicetype-images /opt/nautobot/media/device-images /opt/nautobot/media/rack-elevations /opt/nautobot/media/image-attachments /opt/nautobot/media/moduletype-images && chmod -R 755 /opt/nautobot/media && echo 'Media directories created successfully'"]
    restart: "no"

  nautobot:
    container_name: ${NAUTOBOT_CONTAINER_NAME:-nzth-nautobot}
    image: &shared_image bsmeding/nautobot:2.4.19-py3.12
    depends_on:
      postgres:
        condition: "service_started"
      redis:
        condition: "service_started"
      nautobot-init:
        condition: "service_completed_successfully"
    ports:
      - "${NAUTOBOT_PORT:-8081}:8080"
    networks:
      - nautobot
      - clab
    environment:
      - NAUTOBOT_DEBUG=True
      - NAUTOBOT_DJANGO_EXTENSIONS_ENABLED=False
      - NAUTOBOT_DJANGO_TOOLBAR_ENABLED=False
      - NAUTOBOT_HIDE_RESTRICTED_UI=True
      - NAUTOBOT_LOG_LEVEL=WARNING
      - NAUTOBOT_METRICS_ENABLED=False
      - NAUTOBOT_NAPALM_TIMEOUT=5
      - NAUTOBOT_NAPALM_USERNAME=admin
      - NAUTOBOT_NAPALM_PASSWORD=admin
      - NAUTOBOT_MAX_PAGE_SIZE=0
      - NAUTOBOT_DB_HOST=${NAUTOBOT_DB_HOST:-nzth-postgres}
      - NAUTOBOT_DB_PORT=5432
      - NAUTOBOT_DB_NAME=${POSTGRES_DB:-nautobot}
      - NAUTOBOT_DB_USER=${POSTGRES_USER:-nautobot}
      - NAUTOBOT_DB_PASSWORD=${POSTGRES_PASSWORD:-nautobotpassword}
      - NAUTOBOT_ALLOWED_HOSTS=*
      - NAUTOBOT_REDIS_HOST=${NAUTOBOT_REDIS_HOST:-nzth-redis}
      - NAUTOBOT_REDIS_PORT=6379
      - NAUTOBOT_SUPERUSER_NAME=${SUPERUSER_NAME:-admin}
      - NAUTOBOT_SUPERUSER_PASSWORD=${SUPERUSER_PASSWORD:-admin}
      - NAUTOBOT_SUPERUSER_API_TOKEN=1234567890abcde0987654321
      - NAUTOBOT_CREATE_SUPERUSER=true
      - NAUTOBOT_INSTALLATION_METRICS_ENABLED=false
      - NAUTOBOT_CONFIG=/opt/nautobot/nautobot_config.py
      - NAUTOBOT_CELERY_BROKER_URL=redis://${NAUTOBOT_REDIS_HOST:-nzth-redis}:6379/0
      - NAUTOBOT_SECURE_HSTS_SECONDS=3600
      - NAUTOBOT_SECURE_SSL_REDIRECT=True
      - NAUTOBOT_SESSION_COOKIE_SECURE=True
      - NAUTOBOT_CSRF_COOKIE_SECURE=True
      - NAUTOBOT_JOBS_ROOT=/opt/nautobot/jobs
      - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python       # Due to incompatibility between protobuf version for cloudvision and napalm-srl
    volumes:
      - ./config/nautobot_config.py:/opt/nautobot/nautobot_config.py
      - ./jobs:/opt/nautobot/jobs
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8080/health/"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 120s
    command: ["nautobot-server", "runserver", "0.0.0.0:8080"]

  postgres:
    image: postgres:18-alpine
    container_name: ${POSTGRES_CONTAINER_NAME:-nzth-postgres}
    command:
      - "-c"
      - "max_connections=1000"
    healthcheck:
      test: "pg_isready --username=$$POSTGRES_USER --dbname=$$POSTGRES_DB"
      interval: "10s"
      timeout: "5s"
      retries: 10    
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-nautobot}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nautobotpassword}
      POSTGRES_DB: ${POSTGRES_DB:-nautobot}
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
    restart: unless-stopped
    networks:
      - nautobot

  redis:
    image: redis:6
    container_name: ${REDIS_CONTAINER_NAME:-nzth-redis}
    ports:
      - "6381:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - nautobot

  celery-beat:
    container_name: ${CELERY_BEAT_CONTAINER_NAME:-nzth-nautobot_celery_beat}
    image: *shared_image
    command: ["nautobot-server", "celery", "beat"]
    depends_on:
      nautobot:
        condition: "service_started"
    volumes:
      - ./config/nautobot_config.py:/opt/nautobot/nautobot_config.py
    environment:
      - NAUTOBOT_DB_HOST=${NAUTOBOT_DB_HOST:-nzth-postgres}
      - NAUTOBOT_DB_PORT=5432
      - NAUTOBOT_DB_NAME=${POSTGRES_DB:-nautobot}
      - NAUTOBOT_DB_USER=${POSTGRES_USER:-nautobot}
      - NAUTOBOT_DB_PASSWORD=${POSTGRES_PASSWORD:-nautobotpassword}
      - NAUTOBOT_REDIS_HOST=${NAUTOBOT_REDIS_HOST:-nzth-redis}
      - NAUTOBOT_REDIS_PORT=6379      
      - NAUTOBOT_CELERY_BROKER_URL=redis://${NAUTOBOT_REDIS_HOST:-nzth-redis}:6379/0
      - NAUTOBOT_CONFIG=/opt/nautobot/nautobot_config.py
      
    networks:
      - nautobot

  celery-worker-1:
    image: *shared_image
    container_name: ${CELERY_WORKER_CONTAINER_NAME:-nzth-nautobot_celery_worker_1}
    command: ["nautobot-server", "celery", "worker", "--concurrency=4"]
    depends_on:
      nautobot:
        condition: "service_started"
    healthcheck:
      interval: "30s"
      timeout: "10s"
      start_period: "30s"
      retries: 3
      test:
        [
          "CMD",
          "bash",
          "-c",
          "nautobot-server celery inspect ping --destination celery@$$HOSTNAME"  ## $$ because of docker-compose
        ]
    volumes:
      - ./config/nautobot_config.py:/opt/nautobot/nautobot_config.py
      - ./jobs:/opt/nautobot/jobs
      - ./media:/opt/nautobot/media
    environment:
      - NAUTOBOT_DB_HOST=${NAUTOBOT_DB_HOST:-nzth-postgres}
      - NAUTOBOT_DB_PORT=5432
      - NAUTOBOT_DB_NAME=${POSTGRES_DB:-nautobot}
      - NAUTOBOT_DB_USER=${POSTGRES_USER:-nautobot}
      - NAUTOBOT_DB_PASSWORD=${POSTGRES_PASSWORD:-nautobotpassword}
      - NAUTOBOT_REDIS_HOST=${NAUTOBOT_REDIS_HOST:-nzth-redis}
      - NAUTOBOT_REDIS_PORT=6379      
      - NAUTOBOT_CELERY_BROKER_URL=redis://${NAUTOBOT_REDIS_HOST:-nzth-redis}:6379/0
      - NAUTOBOT_CONFIG=/opt/nautobot/nautobot_config.py
      - NAUTOBOT_JOBS_ROOT=/opt/nautobot/jobs
      - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
    networks:
      - nautobot
      - clab

# ## MONITORING
#   prometheus:
#     image: prom/prometheus:latest
#     container_name: nzth-prometheus
#     depends_on:
#       - snmp_exporter
#     networks:
#       - nautobot
#       - clab
#     ports:
#       - "9090:9090"
#     volumes:
#       - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
#       - ./prometheus/targets:/etc/prometheus/targets
#       - prometheus_data:/prometheus
#     restart: unless-stopped

#   snmp_exporter:
#     image: prom/snmp-exporter:latest
#     container_name: nzth-snmp-exporter
#     networks:
#       - nautobot
#       - clab
#     ports:
#       - "9116:9116"
#     restart: unless-stopped
#     # volumes:
#     #   - ./prometheus/snmp.yml:/etc/snmp_exporter/snmp.yml:ro

#   grafana:
#     image: grafana/grafana:latest
#     container_name: nzth-grafana
#     depends_on:
#       - prometheus
#     networks:
#       - nautobot
#     ports:
#       - "3000:3000"
#     environment:
#       - GF_SECURITY_ADMIN_USER=admin
#       - GF_SECURITY_ADMIN_PASSWORD=admin
#       - GF_USERS_ALLOW_SIGN_UP=false
#     volumes:
#       - grafana_data:/var/lib/grafana
#     restart: unless-stopped


networks:
  # Default Compose network for nautobot services
  nautobot:
    driver: bridge

  # Compose-managed network named exactly "clab"
  # (NOT external). Containerlab will join this by name.
  clab:
    name: clab
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.20.0/24                    # pick a /24 that doesnâ€™t overlap anything else
          gateway: 172.20.20.1
volumes:
  postgres_data: {}
  redis_data: {}
  prometheus_data: {}
  grafana_data: {}